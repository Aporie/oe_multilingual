<?php

/**
 * @file
 * Multilingual module.
 */

declare(strict_types = 1);

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\TypedData\TranslatableInterface;
use Drupal\Core\Url;

/**
 * Implements hook_language_switch_links_alter().
 *
 * Replaces the language links labels with the native language version.
 */
function oe_multilingual_language_switch_links_alter(array &$links, string $type, Url $url): void {
  /** @var \Drupal\Core\Language\LanguageInterface[] $original_languages */
  $original_languages = \Drupal::service('language_manager')->getNativeLanguages();
  foreach ($links as $code => &$link) {
    if (isset($original_languages[$code])) {
      $link['title'] = $original_languages[$code]->getName();
    }
  }
}

/**
 * Implements hook_language_fallback_candidates_alter().
 *
 * - Disable default language fallback logic: the default Drupal behavior
 * will return all available languages and then choose the first one
 * ordered alphabetically.
 * - Return the entity's original language as the default fallback language.
 */
function oe_multilingual_language_fallback_candidates_alter(array &$candidates, array $context): void {
  $operation = $context['operation'];

  // The default fallback language for any entity is the language it was
  // originally written on.
  if ($operation === 'entity_upcast' || $operation === 'entity_view') {
    $attempted_langcode = $context['langcode'];
    if ($context['data'] instanceof TranslatableInterface) {
      $candidates = [$attempted_langcode => $attempted_langcode];
      $entity = $context['data'];
      $default_language = $entity->getUntranslated()->language()->getId();
      $candidates[$default_language] = $default_language;
    }
  }
}

/**
 * Implements hook_preprocess_language_selection_page_content().
 *
 * Replaces the language links labels with the native language version.
 */
function oe_multilingual_preprocess_language_selection_page_content(&$variables): void {
  /** @var \Drupal\Core\Language\LanguageInterface[] $original_languages */
  $original_languages = \Drupal::service('language_manager')->getNativeLanguages();
  foreach ($variables['language_links']['#items'] as $langcode => &$item) {
    if (isset($original_languages[$langcode])) {
      $item['#title'] = $original_languages[$langcode]->getName();
    }
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Make sure whenever we add or re-add a language it follows the configuration
 * set by the module's configuration files.
 */
function oe_multilingual_configurable_language_presave(EntityInterface $entity) {
  $storage = new FileStorage(drupal_get_path('module', 'oe_multilingual') . '/config/install');
  $values = $storage->read('language.entity.' . $entity->id());
  if ($values) {
    foreach ($values as $key => $value) {
      $entity->set($key, $value);
    }
  }
}
