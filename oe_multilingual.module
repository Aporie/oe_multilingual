<?php

/**
 * @file
 * Multilingual module.
 */

declare(strict_types = 1);

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\TypedData\TranslatableInterface;
use Drupal\Core\Url;

/**
 * Implements hook_language_switch_links_alter().
 *
 * Replaces the language links labels with the native language version.
 */
function oe_multilingual_language_switch_links_alter(array &$links, string $type, Url $url): void {
  /** @var \Drupal\Core\Language\LanguageInterface[] $original_languages */
  $original_languages = \Drupal::service('language_manager')->getNativeLanguages();
  foreach ($links as $code => &$link) {
    if (isset($original_languages[$code])) {
      $link['title'] = $original_languages[$code]->getName();
    }
  }
}

/**
 * Implements hook_language_fallback_candidates_alter().
 *
 * - Disable default language fallback logic: the default Drupal behavior
 * will return all available languages and then choose the first one
 * ordered alphabetically.
 * - Return the entity's original language as the default fallback language.
 */
function oe_multilingual_language_fallback_candidates_alter(array &$candidates, array $context): void {
  $operation = $context['operation'];

  // The default fallback language for any entity is the language it was
  // originally written on.
  if ($operation === 'entity_upcast' || $operation === 'entity_view') {
    $attempted_langcode = $context['langcode'];
    if ($context['data'] instanceof TranslatableInterface) {
      $candidates = [$attempted_langcode => $attempted_langcode];
      $entity = $context['data'];
      $default_language = $entity->getUntranslated()->language()->getId();
      $candidates[$default_language] = $default_language;
    }
  }
}

/**
 * Implements hook_preprocess_language_selection_page_content().
 *
 * Replaces the language links labels with the native language version.
 */
function oe_multilingual_preprocess_language_selection_page_content(&$variables): void {
  /** @var \Drupal\Core\Language\LanguageInterface[] $original_languages */
  $original_languages = \Drupal::service('language_manager')->getNativeLanguages();
  foreach ($variables['language_links']['#items'] as $langcode => &$item) {
    if (isset($original_languages[$langcode])) {
      $item['#title'] = $original_languages[$langcode]->getName();
    }
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Make sure whenever we add or re-add a language it follows the configuration
 * set by the module's configuration files.
 */
function oe_multilingual_configurable_language_presave(EntityInterface $entity) {
  $storage = new FileStorage(drupal_get_path('module', 'oe_multilingual') . '/config/install');
  $values = $storage->read('language.entity.' . $entity->id());
  if ($values) {
    foreach ($values as $key => $value) {
      $entity->set($key, $value);
    }
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter() for the Page Header block.
 */
function oe_multilingual_block_view_oe_theme_helper_page_header_alter(array &$build, BlockPluginInterface $block) {
  $build['#pre_render'][] = 'oe_multilingual_page_header_pre_render';
}

/**
 * Pre-render callback for the Page Header block alteration.
 *
 * We use this to add the language switcher
 * to the page header if OpenEuropa Theme is being used.
 *
 * @param array $build
 *   The built render array of the block.
 *
 * @see \Drupal\oe_theme_helper\Plugin\Block\PageHeaderBlock
 *
 * @return array
 *   The built render array of the block.
 */
function oe_multilingual_page_header_pre_render(array $build): array {
  // Get required services.
  $multilingual_helper = \Drupal::service('oe_multilingual.helper');
  $language_provider = \Drupal::service('oe_multilingual.language_provider');
  $language_manager = \Drupal::languageManager();

  $entity = $multilingual_helper->getEntityFromCurrentRoute();
  // Bail out if there is no entity or if it's not a content entity.
  if (!$entity || !$entity instanceof ContentEntityInterface) {
    return $build;
  }

  // Render the links only if the current entity translation language is not
  // the same as the current site language.
  /** @var \Drupal\Core\Entity\EntityInterface $translation */
  $translation = $multilingual_helper->getCurrentLanguageEntityTranslation($entity);
  $current_language = $language_manager->getCurrentLanguage();
  if ($translation->language()->getId() === $current_language->getId()) {
    return $build;
  }

  $content = &$build['content'];

  $content['#language_switcher']['current'] = $translation->language()->getName();

  /** @var \Drupal\Core\Language\LanguageInterface[] $languages */
  $languages = $language_manager->getNativeLanguages();
  $content['#language_switcher']['unavailable'] = $languages[$current_language->getId()]->getName();

  // Normalize the links to an array of options suitable for the ECL
  // "ecl-lang-select-pages" template.
  $content['#language_switcher']['options'] = [];
  foreach ($language_provider->getAvailableEntityLanguages($entity) as $language_code => $link) {
    /** @var \Drupal\Core\Url $url */
    $url = $link['url'];
    $href = $url
      ->setOptions(['language' => $link['language']])
      ->setAbsolute(TRUE)
      ->toString();

    $content['#language_switcher']['options'][] = [
      'href' => $href,
      'hreflang' => $language_code,
      'label' => $link['title'],
      'lang' => $language_code,
    ];
  }

  $content['#language_switcher']['is_primary'] = TRUE;

  return $build;
}
