<?php

/**
 * @file
 * Install, update and uninstall functions for the oe_multilingual module.
 */

declare(strict_types = 1);

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Language\LanguageInterface;
use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUrl;
use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationSelected;
use Drupal\oe_multilingual\Plugin\LanguageNegotiation\LanguageNegotiationAdmin;

/**
 * Implements hook_install().
 */
function oe_multilingual_install() {
  if (\Drupal::isConfigSyncing() === TRUE) {
    // If config is syncing, we do nothing here.
    return;
  }

  // Set up the weight of the English language.
  \Drupal::configFactory()
    ->getEditable('language.entity.en')
    ->set('weight', 6)
    ->save();

  // Disable remote translations downloading from Drupal localisation service.
  // Also make sure that English language is translatable.
  \Drupal::configFactory()
    ->getEditable('locale.settings')
    ->set('translation.import_enabled', FALSE)
    ->set('translate_english', TRUE)
    ->save();

  // Make sure that English language prefix is set to "en".
  \Drupal::configFactory()
    ->getEditable('language.negotiation')
    ->set('url.prefixes.en', 'en')
    ->save();

  // Make sure that Portuguese language prefix is set to "pt".
  \Drupal::configFactory()
    ->getEditable('language.negotiation')
    ->set('url.prefixes.pt-pt', 'pt')
    ->save();

  /** @var \Drupal\oe_multilingual\LanguageNegotiationSetterInterface $setter */
  $setter = \Drupal::service('oe_multilingual.language_negotiation_setter');

  // Set default language negotiation methods.
  $setter->enableNegotiationMethods([
    LanguageInterface::TYPE_INTERFACE,
    LanguageInterface::TYPE_CONTENT,
  ]);

  // For interface negotiation make sure administrative pages are in English.
  $setter->setInterfaceSettings([
    LanguageNegotiationAdmin::METHOD_ID => -20,
    LanguageNegotiationUrl::METHOD_ID => -19,
    LanguageNegotiationSelected::METHOD_ID => 20,
  ]);

  // For content negotiation make sure that content respects URL language.
  $setter->setContentSettings([
    LanguageNegotiationUrl::METHOD_ID => -19,
    LanguageNegotiationSelected::METHOD_ID => 20,
  ]);

  \Drupal::messenger()->addMessage('Please be aware that oe_multilingual makes changes to the following configurations: Language, Locale, Administration language negotiation.');

  _oe_multilingual_ensure_config_translations();
}

/**
 * Ensures that local entries exist for the configuration translations.
 *
 * Because we are shipping with pre-existing config translations for the
 * languages, we need to also ensure that upon install, corresponding locale
 * entries are created for all the translatable values found in them. See
 * \Drupal\locale\LocaleConfigSubscriber for the logic that does this normally
 * and onto which we rely by simply saving the config translations.
 *
 * In addition, since the aforementioned logic only happens if the site is NOT
 * currently in the process of being installed, we need to "trick" it into
 * believing otherwise for the cases in which the module is being installed
 * as part of a site install (such as profile dependency).
 */
function _oe_multilingual_ensure_config_translations(): void {
  $backup = isset($GLOBALS['install_state']) ? $GLOBALS['install_state'] : NULL;
  if ($backup) {
    unset($GLOBALS['install_state']);
  }

  $language_manager = \Drupal::languageManager();
  $storage = new FileStorage(drupal_get_path('module', 'oe_multilingual') . '/config/install');
  foreach ($language_manager->getLanguages() as $language) {
    if ($language->getId() === 'en') {
      continue;
    }

    $collection = $storage->createCollection('language.' . $language->getId());
    foreach ($collection->listAll() as $name) {
      $config = $language_manager->getLanguageConfigOverride($language->getId(), $name);
      $config->save();
    }
  }

  if ($backup) {
    $GLOBALS['install_state'] = $backup;
  }
}
